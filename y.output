Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 $@2: %empty

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';'

   16 $@3: %empty

   17 subprogram_head: PROCEDURE ID $@3 arguments ';'

   18 arguments: '(' parameter_list ')'

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement

   29 $@4: %empty

   30 statement: $@4 IF expression THEN statement ELSE statement

   31 $@5: %empty

   32 statement: $@5 WHILE expression DO statement

   33 variable: ID
   34         | ID '[' expression ']'

   35 procedure_statement: ID
   36                    | ID '(' expression_list ')'

   37 expression_list: expression
   38                | expression_list ',' expression

   39 expression: simple_expression
   40           | simple_expression RELOP simple_expression

   41 simple_expression: term
   42                  | simple_expression ADDOP term

   43 term: factor
   44     | term MULOP factor

   45 factor: ID
   46       | ID '[' expression ']'
   47       | ID '(' expression_list ')'
   48       | INUM
   49       | RNUM
   50       | '(' expression ')'
   51       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 36 47 50
')' (41) 2 18 36 47 50
',' (44) 4 38
'.' (46) 2
':' (58) 5 15 19 20
';' (59) 2 5 11 15 17 20 25
'[' (91) 8 34 46
']' (93) 8 34 46
error (256)
INUM (258) 8 48
RNUM (259) 49
ID (260) 2 3 4 15 17 33 34 35 36 45 46 47
ASSIGNOP (261) 26
RELOP (262) 40
ADDOP (263) 42
MULOP (264) 44
NOT (265) 51
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 2
VAR (279) 5
ARRAY (280) 8
OF (281) 8
DOTDOT (282) 8
INTEGER (283) 9
REAL (284) 10
FUNCTION (285) 15
PROCEDURE (286) 17
BBEGIN (287) 21
END (288) 21
IF (289) 30
THEN (290) 30
ELSE (291) 30
WHILE (292) 32
DO (293) 32
FUNCTION_CALL (294)
ARRAY_ACCESS (295)
COMMA (296)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 2, on right: 0
$@1 (52)
    on left: 1, on right: 2
identifier_list (53)
    on left: 3 4, on right: 2 4 5 19 20
declarations (54)
    on left: 5 6, on right: 2 5 13
type (55)
    on left: 7 8, on right: 5 19 20
standard_type (56)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (57)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (58)
    on left: 13, on right: 11
subprogram_head (59)
    on left: 15 17, on right: 13
$@2 (60)
    on left: 14, on right: 15
$@3 (61)
    on left: 16, on right: 17
arguments (62)
    on left: 18, on right: 15 17
parameter_list (63)
    on left: 19 20, on right: 18 20
compound_statement (64)
    on left: 21, on right: 2 13 28
optional_statements (65)
    on left: 22 23, on right: 21
statement_list (66)
    on left: 24 25, on right: 22 25
statement (67)
    on left: 26 27 28 30 32, on right: 24 25 30 32
$@4 (68)
    on left: 29, on right: 30
$@5 (69)
    on left: 31, on right: 32
variable (70)
    on left: 33 34, on right: 26
procedure_statement (71)
    on left: 35 36, on right: 27
expression_list (72)
    on left: 37 38, on right: 36 38 47
expression (73)
    on left: 39 40, on right: 26 30 32 34 37 38 46 50
simple_expression (74)
    on left: 41 42, on right: 39 40 42
term (75)
    on left: 43 44, on right: 41 42 44
factor (76)
    on left: 45 46 47 48 49 50 51, on right: 43 44 51


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 17

   15 subprogram_head: FUNCTION . ID $@2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


State 18

   17 subprogram_head: PROCEDURE . ID $@3 arguments ';'

    ID  shift, and go to state 25


State 19

   21 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    IF        reduce using rule 29 ($@4)
    WHILE     reduce using rule 31 ($@5)
    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 27
    optional_statements  go to state 28
    statement_list       go to state 29
    statement            go to state 30
    $@4                  go to state 31
    $@5                  go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


State 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 36


State 22

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 24

   15 subprogram_head: FUNCTION ID . $@2 arguments ':' standard_type ';'

    $default  reduce using rule 14 ($@2)

    $@2  go to state 43


State 25

   17 subprogram_head: PROCEDURE ID . $@3 arguments ';'

    $default  reduce using rule 16 ($@3)

    $@3  go to state 44


State 26

   33 variable: ID .
   34         | ID . '[' expression ']'
   35 procedure_statement: ID .
   36                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 33 (variable)
    $default  reduce using rule 35 (procedure_statement)


State 27

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 28

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 47


State 29

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 48

    $default  reduce using rule 22 (optional_statements)


State 30

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 31

   30 statement: $@4 . IF expression THEN statement ELSE statement

    IF  shift, and go to state 49


State 32

   32 statement: $@5 . WHILE expression DO statement

    WHILE  shift, and go to state 50


State 33

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 51


State 34

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 36

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 52


State 37

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 38

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 53


State 39

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 40

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 41

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 54


State 42

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 43

   15 subprogram_head: FUNCTION ID $@2 . arguments ':' standard_type ';'

    '('  shift, and go to state 55

    arguments  go to state 56


State 44

   17 subprogram_head: PROCEDURE ID $@3 . arguments ';'

    '('  shift, and go to state 55

    arguments  go to state 57


State 45

   36 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression_list    go to state 63
    expression         go to state 64
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 46

   34 variable: ID '[' . expression ']'

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 68
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 47

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 48

   25 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 69
    $@4                  go to state 31
    $@5                  go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 49

   30 statement: $@4 IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 70
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 50

   32 statement: $@5 WHILE . expression DO statement

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 71
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 51

   26 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 72
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 52

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 73


State 53

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 74


State 54

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 55

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 75
    parameter_list   go to state 76


State 56

   15 subprogram_head: FUNCTION ID $@2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 77


State 57

   17 subprogram_head: PROCEDURE ID $@3 arguments . ';'

    ';'  shift, and go to state 78


State 58

   48 factor: INUM .

    $default  reduce using rule 48 (factor)


State 59

   49 factor: RNUM .

    $default  reduce using rule 49 (factor)


State 60

   45 factor: ID .
   46       | ID . '[' expression ']'
   47       | ID . '(' expression_list ')'

    '('  shift, and go to state 79
    '['  shift, and go to state 80

    $default  reduce using rule 45 (factor)


State 61

   51 factor: NOT . factor

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    factor  go to state 81


State 62

   50 factor: '(' . expression ')'

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 82
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 63

   36 procedure_statement: ID '(' expression_list . ')'
   38 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 83
    ','  shift, and go to state 84


State 64

   37 expression_list: expression .

    $default  reduce using rule 37 (expression_list)


State 65

   39 expression: simple_expression .
   40           | simple_expression . RELOP simple_expression
   42 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 85
    ADDOP  shift, and go to state 86

    $default  reduce using rule 39 (expression)


State 66

   41 simple_expression: term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 87

    $default  reduce using rule 41 (simple_expression)


State 67

   43 term: factor .

    $default  reduce using rule 43 (term)


State 68

   34 variable: ID '[' expression . ']'

    ']'  shift, and go to state 88


State 69

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 70

   30 statement: $@4 IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 89


State 71

   32 statement: $@5 WHILE expression . DO statement

    DO  shift, and go to state 90


State 72

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 73

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 74

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 91


State 75

    4 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 92


State 76

   18 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 93
    ';'  shift, and go to state 94


State 77

   15 subprogram_head: FUNCTION ID $@2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 95


State 78

   17 subprogram_head: PROCEDURE ID $@3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


State 79

   47 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression_list    go to state 96
    expression         go to state 64
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 80

   46 factor: ID '[' . expression ']'

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 97
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 81

   51 factor: NOT factor .

    $default  reduce using rule 51 (factor)


State 82

   50 factor: '(' expression . ')'

    ')'  shift, and go to state 98


State 83

   36 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 36 (procedure_statement)


State 84

   38 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    expression         go to state 99
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


State 85

   40 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    simple_expression  go to state 100
    term               go to state 66
    factor             go to state 67


State 86

   42 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    term    go to state 101
    factor  go to state 67


State 87

   44 term: term MULOP . factor

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 62

    factor  go to state 102


State 88

   34 variable: ID '[' expression ']' .

    $default  reduce using rule 34 (variable)


State 89

   30 statement: $@4 IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 103
    $@4                  go to state 31
    $@5                  go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 90

   32 statement: $@5 WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 104
    $@4                  go to state 31
    $@5                  go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 91

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 105


State 92

   19 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 106
    standard_type  go to state 42


State 93

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


State 94

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 107


State 95

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 108


State 96

   38 expression_list: expression_list . ',' expression
   47 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 109
    ','  shift, and go to state 84


State 97

   46 factor: ID '[' expression . ']'

    ']'  shift, and go to state 110


State 98

   50 factor: '(' expression ')' .

    $default  reduce using rule 50 (factor)


State 99

   38 expression_list: expression_list ',' expression .

    $default  reduce using rule 38 (expression_list)


State 100

   40 expression: simple_expression RELOP simple_expression .
   42 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 86

    $default  reduce using rule 40 (expression)


State 101

   42 simple_expression: simple_expression ADDOP term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 87

    $default  reduce using rule 42 (simple_expression)


State 102

   44 term: term MULOP factor .

    $default  reduce using rule 44 (term)


State 103

   30 statement: $@4 IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 111


State 104

   32 statement: $@5 WHILE expression DO statement .

    $default  reduce using rule 32 (statement)


State 105

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 112


State 106

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 107

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 113


State 108

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 109

   47 factor: ID '(' expression_list ')' .

    $default  reduce using rule 47 (factor)


State 110

   46 factor: ID '[' expression ']' .

    $default  reduce using rule 46 (factor)


State 111

   30 statement: $@4 IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 114
    $@4                  go to state 31
    $@5                  go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 112

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 115


State 113

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 116
    standard_type  go to state 42


State 114

   30 statement: $@4 IF expression THEN statement ELSE statement .

    $default  reduce using rule 30 (statement)


State 115

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 117


State 116

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 117

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
