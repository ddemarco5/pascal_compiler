Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 $@2: %empty

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';'

   16 $@3: %empty

   17 subprogram_head: PROCEDURE ID $@3 arguments ';'

   18 arguments: '(' parameter_list ')'

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement

   29 $@4: %empty

   30 statement: $@4 IF expression THEN statement ELSE statement

   31 $@5: %empty

   32 statement: $@5 WHILE expression DO statement

   33 $@6: %empty

   34 statement: $@6 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

   35 variable: ID
   36         | array_variable

   37 array_variable: ID '[' expression ']'

   38 procedure_statement: ID
   39                    | ID '(' expression_list ')'

   40 expression_list: expression
   41                | expression_list ',' expression

   42 expression: simple_expression
   43           | simple_expression RELOP simple_expression

   44 simple_expression: term
   45                  | simple_expression ADDOP term

   46 term: factor
   47     | term MULOP factor

   48 factor: ID
   49       | ID '[' expression ']'
   50       | ID '(' expression_list ')'
   51       | INUM
   52       | RNUM
   53       | '(' expression ')'
   54       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 39 50 53
')' (41) 2 18 39 50 53
',' (44) 4 41
'.' (46) 2
':' (58) 5 15 19 20
';' (59) 2 5 11 15 17 20 25
'[' (91) 8 37 49
']' (93) 8 37 49
error (256)
INUM (258) 8 51
RNUM (259) 52
ID (260) 2 3 4 15 17 35 37 38 39 48 49 50
ASSIGNOP (261) 26 34
RELOP (262) 43
ADDOP (263) 45
MULOP (264) 47
NOT (265) 54
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 2
VAR (279) 5
ARRAY (280) 8
OF (281) 8
DOTDOT (282) 8
INTEGER (283) 9
REAL (284) 10
FUNCTION (285) 15
PROCEDURE (286) 17
BBEGIN (287) 21
END (288) 21
IF (289) 30
THEN (290) 30
ELSE (291) 30
WHILE (292) 32
DO (293) 32 34
FOR (294) 34
TO (295) 34
FUNCTION_CALL (296)
ARRAY_ACCESS (297)
COMMA (298)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 2, on right: 0
$@1 (54)
    on left: 1, on right: 2
identifier_list (55)
    on left: 3 4, on right: 2 4 5 19 20
declarations (56)
    on left: 5 6, on right: 2 5 13
type (57)
    on left: 7 8, on right: 5 19 20
standard_type (58)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (59)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (60)
    on left: 13, on right: 11
subprogram_head (61)
    on left: 15 17, on right: 13
$@2 (62)
    on left: 14, on right: 15
$@3 (63)
    on left: 16, on right: 17
arguments (64)
    on left: 18, on right: 15 17
parameter_list (65)
    on left: 19 20, on right: 18 20
compound_statement (66)
    on left: 21, on right: 2 13 28
optional_statements (67)
    on left: 22 23, on right: 21
statement_list (68)
    on left: 24 25, on right: 22 25
statement (69)
    on left: 26 27 28 30 32 34, on right: 24 25 30 32 34
$@4 (70)
    on left: 29, on right: 30
$@5 (71)
    on left: 31, on right: 32
$@6 (72)
    on left: 33, on right: 34
variable (73)
    on left: 35 36, on right: 26 34
array_variable (74)
    on left: 37, on right: 36
procedure_statement (75)
    on left: 38 39, on right: 27
expression_list (76)
    on left: 40 41, on right: 39 41 50
expression (77)
    on left: 42 43, on right: 26 30 32 37 40 41 49 53
simple_expression (78)
    on left: 44 45, on right: 34 42 43 45
term (79)
    on left: 46 47, on right: 44 45 47
factor (80)
    on left: 48 49 50 51 52 53 54, on right: 46 47 54


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 17

   15 subprogram_head: FUNCTION . ID $@2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


State 18

   17 subprogram_head: PROCEDURE . ID $@3 arguments ';'

    ID  shift, and go to state 25


State 19

   21 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    IF        reduce using rule 29 ($@4)
    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 27
    optional_statements  go to state 28
    statement_list       go to state 29
    statement            go to state 30
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 37


State 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 38


State 22

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 39


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 40
    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42

    type           go to state 43
    standard_type  go to state 44


State 24

   15 subprogram_head: FUNCTION ID . $@2 arguments ':' standard_type ';'

    $default  reduce using rule 14 ($@2)

    $@2  go to state 45


State 25

   17 subprogram_head: PROCEDURE ID . $@3 arguments ';'

    $default  reduce using rule 16 ($@3)

    $@3  go to state 46


State 26

   35 variable: ID .
   37 array_variable: ID . '[' expression ']'
   38 procedure_statement: ID .
   39                    | ID . '(' expression_list ')'

    '('  shift, and go to state 47
    '['  shift, and go to state 48

    ASSIGNOP  reduce using rule 35 (variable)
    $default  reduce using rule 38 (procedure_statement)


State 27

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 28

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 49


State 29

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 50

    $default  reduce using rule 22 (optional_statements)


State 30

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 31

   30 statement: $@4 . IF expression THEN statement ELSE statement

    IF  shift, and go to state 51


State 32

   32 statement: $@5 . WHILE expression DO statement

    WHILE  shift, and go to state 52


State 33

   34 statement: $@6 . FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

    FOR  shift, and go to state 53


State 34

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 54


State 35

   36 variable: array_variable .

    $default  reduce using rule 36 (variable)


State 36

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 37

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 38

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 55


State 39

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 40

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 56


State 41

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 42

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 43

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 57


State 44

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 45

   15 subprogram_head: FUNCTION ID $@2 . arguments ':' standard_type ';'

    '('  shift, and go to state 58

    arguments  go to state 59


State 46

   17 subprogram_head: PROCEDURE ID $@3 . arguments ';'

    '('  shift, and go to state 58

    arguments  go to state 60


State 47

   39 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression_list    go to state 66
    expression         go to state 67
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 48

   37 array_variable: ID '[' . expression ']'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 71
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 49

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 50

   25 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 72
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 51

   30 statement: $@4 IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 73
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 52

   32 statement: $@5 WHILE . expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 74
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 53

   34 statement: $@6 FOR . variable ASSIGNOP simple_expression TO simple_expression DO statement

    ID  shift, and go to state 75

    variable        go to state 76
    array_variable  go to state 35


State 54

   26 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 77
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 55

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 78


State 56

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 79


State 57

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 58

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 80
    parameter_list   go to state 81


State 59

   15 subprogram_head: FUNCTION ID $@2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 82


State 60

   17 subprogram_head: PROCEDURE ID $@3 arguments . ';'

    ';'  shift, and go to state 83


State 61

   51 factor: INUM .

    $default  reduce using rule 51 (factor)


State 62

   52 factor: RNUM .

    $default  reduce using rule 52 (factor)


State 63

   48 factor: ID .
   49       | ID . '[' expression ']'
   50       | ID . '(' expression_list ')'

    '('  shift, and go to state 84
    '['  shift, and go to state 85

    $default  reduce using rule 48 (factor)


State 64

   54 factor: NOT . factor

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    factor  go to state 86


State 65

   53 factor: '(' . expression ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 87
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 66

   39 procedure_statement: ID '(' expression_list . ')'
   41 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 88
    ','  shift, and go to state 89


State 67

   40 expression_list: expression .

    $default  reduce using rule 40 (expression_list)


State 68

   42 expression: simple_expression .
   43           | simple_expression . RELOP simple_expression
   45 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 90
    ADDOP  shift, and go to state 91

    $default  reduce using rule 42 (expression)


State 69

   44 simple_expression: term .
   47 term: term . MULOP factor

    MULOP  shift, and go to state 92

    $default  reduce using rule 44 (simple_expression)


State 70

   46 term: factor .

    $default  reduce using rule 46 (term)


State 71

   37 array_variable: ID '[' expression . ']'

    ']'  shift, and go to state 93


State 72

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 73

   30 statement: $@4 IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 94


State 74

   32 statement: $@5 WHILE expression . DO statement

    DO  shift, and go to state 95


State 75

   35 variable: ID .
   37 array_variable: ID . '[' expression ']'

    '['  shift, and go to state 48

    $default  reduce using rule 35 (variable)


State 76

   34 statement: $@6 FOR variable . ASSIGNOP simple_expression TO simple_expression DO statement

    ASSIGNOP  shift, and go to state 96


State 77

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 78

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 79

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 97


State 80

    4 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 98


State 81

   18 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 99
    ';'  shift, and go to state 100


State 82

   15 subprogram_head: FUNCTION ID $@2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42

    standard_type  go to state 101


State 83

   17 subprogram_head: PROCEDURE ID $@3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


State 84

   50 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression_list    go to state 102
    expression         go to state 67
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 85

   49 factor: ID '[' . expression ']'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 103
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 86

   54 factor: NOT factor .

    $default  reduce using rule 54 (factor)


State 87

   53 factor: '(' expression . ')'

    ')'  shift, and go to state 104


State 88

   39 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 39 (procedure_statement)


State 89

   41 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 105
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 90

   43 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 106
    term               go to state 69
    factor             go to state 70


State 91

   45 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    term    go to state 107
    factor  go to state 70


State 92

   47 term: term MULOP . factor

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    factor  go to state 108


State 93

   37 array_variable: ID '[' expression ']' .

    $default  reduce using rule 37 (array_variable)


State 94

   30 statement: $@4 IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 109
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 95

   32 statement: $@5 WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 110
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 96

   34 statement: $@6 FOR variable ASSIGNOP . simple_expression TO simple_expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 111
    term               go to state 69
    factor             go to state 70


State 97

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 112


State 98

   19 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 40
    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42

    type           go to state 113
    standard_type  go to state 44


State 99

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


State 100

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 114


State 101

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 115


State 102

   41 expression_list: expression_list . ',' expression
   50 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 116
    ','  shift, and go to state 89


State 103

   49 factor: ID '[' expression . ']'

    ']'  shift, and go to state 117


State 104

   53 factor: '(' expression ')' .

    $default  reduce using rule 53 (factor)


State 105

   41 expression_list: expression_list ',' expression .

    $default  reduce using rule 41 (expression_list)


State 106

   43 expression: simple_expression RELOP simple_expression .
   45 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 91

    $default  reduce using rule 43 (expression)


State 107

   45 simple_expression: simple_expression ADDOP term .
   47 term: term . MULOP factor

    MULOP  shift, and go to state 92

    $default  reduce using rule 45 (simple_expression)


State 108

   47 term: term MULOP factor .

    $default  reduce using rule 47 (term)


State 109

   30 statement: $@4 IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 118


State 110

   32 statement: $@5 WHILE expression DO statement .

    $default  reduce using rule 32 (statement)


State 111

   34 statement: $@6 FOR variable ASSIGNOP simple_expression . TO simple_expression DO statement
   45 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 91
    TO     shift, and go to state 119


State 112

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 120


State 113

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 114

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 121


State 115

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 116

   50 factor: ID '(' expression_list ')' .

    $default  reduce using rule 50 (factor)


State 117

   49 factor: ID '[' expression ']' .

    $default  reduce using rule 49 (factor)


State 118

   30 statement: $@4 IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 122
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 119

   34 statement: $@6 FOR variable ASSIGNOP simple_expression TO . simple_expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 123
    term               go to state 69
    factor             go to state 70


State 120

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 124


State 121

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 40
    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42

    type           go to state 125
    standard_type  go to state 44


State 122

   30 statement: $@4 IF expression THEN statement ELSE statement .

    $default  reduce using rule 30 (statement)


State 123

   34 statement: $@6 FOR variable ASSIGNOP simple_expression TO simple_expression . DO statement
   45 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 91
    DO     shift, and go to state 126


State 124

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 41
    REAL     shift, and go to state 42

    standard_type  go to state 127


State 125

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 126

   34 statement: $@6 FOR variable ASSIGNOP simple_expression TO simple_expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19

    WHILE     reduce using rule 31 ($@5)
    FOR       reduce using rule 33 ($@6)
    $default  reduce using rule 29 ($@4)

    compound_statement   go to state 27
    statement            go to state 128
    $@4                  go to state 31
    $@5                  go to state 32
    $@6                  go to state 33
    variable             go to state 34
    array_variable       go to state 35
    procedure_statement  go to state 36


State 127

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)


State 128

   34 statement: $@6 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement .

    $default  reduce using rule 34 (statement)
