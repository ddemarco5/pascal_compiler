Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    4 identifier_list: ID
    5                | identifier_list ',' ID

    6 $@3: %empty

    7 declarations: declarations VAR $@3 identifier_list ':' type ';'
    8             | %empty

    9 type: standard_type
   10     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

   11 standard_type: INTEGER
   12              | REAL

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   14                        | %empty

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   16 $@4: %empty

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';'

   18 $@5: %empty

   19 subprogram_head: PROCEDURE ID $@5 arguments ';'

   20 arguments: '(' parameter_list ')'

   21 $@6: %empty

   22 parameter_list: $@6 identifier_list ':' type

   23 $@7: %empty

   24 parameter_list: parameter_list ';' $@7 identifier_list ':' type

   25 compound_statement: BBEGIN optional_statements END

   26 optional_statements: statement_list
   27                    | %empty

   28 statement_list: statement
   29               | statement_list ';' statement

   30 statement: variable ASSIGNOP expression
   31          | procedure_statement
   32          | compound_statement

   33 $@8: %empty

   34 statement: $@8 IF expression THEN statement ELSE statement

   35 $@9: %empty

   36 statement: $@9 WHILE expression DO statement

   37 $@10: %empty

   38 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

   39 variable: ID
   40         | array_variable

   41 array_variable: ID '[' expression ']'

   42 procedure_statement: ID
   43                    | ID '(' expression_list ')'

   44 expression_list: expression
   45                | expression_list ',' expression

   46 expression: simple_expression
   47           | simple_expression RELOP simple_expression

   48 simple_expression: term
   49                  | simple_expression ADDOP term

   50 term: factor
   51     | term MULOP factor

   52 factor: ID
   53       | ID '[' expression ']'
   54       | ID '(' expression_list ')'
   55       | INUM
   56       | RNUM
   57       | '(' expression ')'
   58       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 20 43 54 57
')' (41) 3 20 43 54 57
',' (44) 5 45
'.' (46) 3
':' (58) 7 17 22 24
';' (59) 3 7 13 17 19 24 29
'[' (91) 10 41 53
']' (93) 10 41 53
error (256)
INUM (258) 10 55
RNUM (259) 56
ID (260) 3 4 5 17 19 39 41 42 43 52 53 54
ASSIGNOP (261) 30 38
RELOP (262) 47
ADDOP (263) 49
MULOP (264) 51
NOT (265) 58
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 3
VAR (279) 7
ARRAY (280) 10
OF (281) 10
DOTDOT (282) 10
INTEGER (283) 11
REAL (284) 12
FUNCTION (285) 17
PROCEDURE (286) 19
BBEGIN (287) 25
END (288) 25
IF (289) 34
THEN (290) 34
ELSE (291) 34
WHILE (292) 36
DO (293) 36 38
FOR (294) 38
TO (295) 38
FUNCTION_CALL (296)
ARRAY_ACCESS (297)
COMMA (298)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 3, on right: 0
$@1 (54)
    on left: 1, on right: 3
$@2 (55)
    on left: 2, on right: 3
identifier_list (56)
    on left: 4 5, on right: 3 5 7 22 24
declarations (57)
    on left: 7 8, on right: 3 7 15
$@3 (58)
    on left: 6, on right: 7
type (59)
    on left: 9 10, on right: 7 22 24
standard_type (60)
    on left: 11 12, on right: 9 10 17
subprogram_declarations (61)
    on left: 13 14, on right: 3 13 15
subprogram_declaration (62)
    on left: 15, on right: 13
subprogram_head (63)
    on left: 17 19, on right: 15
$@4 (64)
    on left: 16, on right: 17
$@5 (65)
    on left: 18, on right: 19
arguments (66)
    on left: 20, on right: 17 19
parameter_list (67)
    on left: 22 24, on right: 20 24
$@6 (68)
    on left: 21, on right: 22
$@7 (69)
    on left: 23, on right: 24
compound_statement (70)
    on left: 25, on right: 3 15 32
optional_statements (71)
    on left: 26 27, on right: 25
statement_list (72)
    on left: 28 29, on right: 26 29
statement (73)
    on left: 30 31 32 34 36 38, on right: 28 29 34 36 38
$@8 (74)
    on left: 33, on right: 34
$@9 (75)
    on left: 35, on right: 36
$@10 (76)
    on left: 37, on right: 38
variable (77)
    on left: 39 40, on right: 30 38
array_variable (78)
    on left: 41, on right: 40
procedure_statement (79)
    on left: 42 43, on right: 31
expression_list (80)
    on left: 44 45, on right: 43 45 54
expression (81)
    on left: 46 47, on right: 30 34 36 41 44 45 53 57
simple_expression (82)
    on left: 48 49, on right: 38 46 47 49
term (83)
    on left: 50 51, on right: 48 49 51
factor (84)
    on left: 52 53 54 55 56 57 58, on right: 50 51 58


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    3 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    3 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    4 identifier_list: ID .

    $default  reduce using rule 4 (identifier_list)


State 8

    3 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' $@2 declarations subprogram_declarations compound_statement '.'
    5 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    3 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' $@2 declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    5 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . $@2 declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 2 ($@2)

    $@2  go to state 13


State 12

    5 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 5 (identifier_list)


State 13

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 8 (declarations)

    declarations  go to state 14


State 14

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations . subprogram_declarations compound_statement '.'
    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 16


State 15

    7 declarations: declarations VAR . $@3 identifier_list ':' type ';'

    $default  reduce using rule 6 ($@3)

    $@3  go to state 17


State 16

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations . compound_statement '.'
   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 23


State 17

    7 declarations: declarations VAR $@3 . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 24


State 18

   17 subprogram_head: FUNCTION . ID $@4 arguments ':' standard_type ';'

    ID  shift, and go to state 25


State 19

   19 subprogram_head: PROCEDURE . ID $@5 arguments ';'

    ID  shift, and go to state 26


State 20

   25 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    IF        reduce using rule 33 ($@8)
    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 27 (optional_statements)

    compound_statement   go to state 28
    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 21

   13 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


State 22

   15 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 8 (declarations)

    declarations  go to state 39


State 23

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


State 24

    5 identifier_list: identifier_list . ',' ID
    7 declarations: declarations VAR $@3 identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 41


State 25

   17 subprogram_head: FUNCTION ID . $@4 arguments ':' standard_type ';'

    $default  reduce using rule 16 ($@4)

    $@4  go to state 42


State 26

   19 subprogram_head: PROCEDURE ID . $@5 arguments ';'

    $default  reduce using rule 18 ($@5)

    $@5  go to state 43


State 27

   39 variable: ID .
   41 array_variable: ID . '[' expression ']'
   42 procedure_statement: ID .
   43                    | ID . '(' expression_list ')'

    '('  shift, and go to state 44
    '['  shift, and go to state 45

    ASSIGNOP  reduce using rule 39 (variable)
    $default  reduce using rule 42 (procedure_statement)


State 28

   32 statement: compound_statement .

    $default  reduce using rule 32 (statement)


State 29

   25 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 46


State 30

   26 optional_statements: statement_list .
   29 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 47

    $default  reduce using rule 26 (optional_statements)


State 31

   28 statement_list: statement .

    $default  reduce using rule 28 (statement_list)


State 32

   34 statement: $@8 . IF expression THEN statement ELSE statement

    IF  shift, and go to state 48


State 33

   36 statement: $@9 . WHILE expression DO statement

    WHILE  shift, and go to state 49


State 34

   38 statement: $@10 . FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

    FOR  shift, and go to state 50


State 35

   30 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 51


State 36

   40 variable: array_variable .

    $default  reduce using rule 40 (variable)


State 37

   31 statement: procedure_statement .

    $default  reduce using rule 31 (statement)


State 38

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 13 (subprogram_declarations)


State 39

    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'
   15 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 52


State 40

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 3 (program)


State 41

    7 declarations: declarations VAR $@3 identifier_list ':' . type ';'

    ARRAY    shift, and go to state 53
    INTEGER  shift, and go to state 54
    REAL     shift, and go to state 55

    type           go to state 56
    standard_type  go to state 57


State 42

   17 subprogram_head: FUNCTION ID $@4 . arguments ':' standard_type ';'

    '('  shift, and go to state 58

    arguments  go to state 59


State 43

   19 subprogram_head: PROCEDURE ID $@5 . arguments ';'

    '('  shift, and go to state 58

    arguments  go to state 60


State 44

   43 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression_list    go to state 66
    expression         go to state 67
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 45

   41 array_variable: ID '[' . expression ']'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 71
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 46

   25 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 25 (compound_statement)


State 47

   29 statement_list: statement_list ';' . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 33 ($@8)

    compound_statement   go to state 28
    statement            go to state 72
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 48

   34 statement: $@8 IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 73
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 49

   36 statement: $@9 WHILE . expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 74
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 50

   38 statement: $@10 FOR . variable ASSIGNOP simple_expression TO simple_expression DO statement

    ID  shift, and go to state 75

    variable        go to state 76
    array_variable  go to state 36


State 51

   30 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 77
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 52

   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   15 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 78


State 53

   10 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 79


State 54

   11 standard_type: INTEGER .

    $default  reduce using rule 11 (standard_type)


State 55

   12 standard_type: REAL .

    $default  reduce using rule 12 (standard_type)


State 56

    7 declarations: declarations VAR $@3 identifier_list ':' type . ';'

    ';'  shift, and go to state 80


State 57

    9 type: standard_type .

    $default  reduce using rule 9 (type)


State 58

   20 arguments: '(' . parameter_list ')'

    $default  reduce using rule 21 ($@6)

    parameter_list  go to state 81
    $@6             go to state 82


State 59

   17 subprogram_head: FUNCTION ID $@4 arguments . ':' standard_type ';'

    ':'  shift, and go to state 83


State 60

   19 subprogram_head: PROCEDURE ID $@5 arguments . ';'

    ';'  shift, and go to state 84


State 61

   55 factor: INUM .

    $default  reduce using rule 55 (factor)


State 62

   56 factor: RNUM .

    $default  reduce using rule 56 (factor)


State 63

   52 factor: ID .
   53       | ID . '[' expression ']'
   54       | ID . '(' expression_list ')'

    '('  shift, and go to state 85
    '['  shift, and go to state 86

    $default  reduce using rule 52 (factor)


State 64

   58 factor: NOT . factor

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    factor  go to state 87


State 65

   57 factor: '(' . expression ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 88
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 66

   43 procedure_statement: ID '(' expression_list . ')'
   45 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 67

   44 expression_list: expression .

    $default  reduce using rule 44 (expression_list)


State 68

   46 expression: simple_expression .
   47           | simple_expression . RELOP simple_expression
   49 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 91
    ADDOP  shift, and go to state 92

    $default  reduce using rule 46 (expression)


State 69

   48 simple_expression: term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 93

    $default  reduce using rule 48 (simple_expression)


State 70

   50 term: factor .

    $default  reduce using rule 50 (term)


State 71

   41 array_variable: ID '[' expression . ']'

    ']'  shift, and go to state 94


State 72

   29 statement_list: statement_list ';' statement .

    $default  reduce using rule 29 (statement_list)


State 73

   34 statement: $@8 IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 95


State 74

   36 statement: $@9 WHILE expression . DO statement

    DO  shift, and go to state 96


State 75

   39 variable: ID .
   41 array_variable: ID . '[' expression ']'

    '['  shift, and go to state 45

    $default  reduce using rule 39 (variable)


State 76

   38 statement: $@10 FOR variable . ASSIGNOP simple_expression TO simple_expression DO statement

    ASSIGNOP  shift, and go to state 97


State 77

   30 statement: variable ASSIGNOP expression .

    $default  reduce using rule 30 (statement)


State 78

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 15 (subprogram_declaration)


State 79

   10 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 98


State 80

    7 declarations: declarations VAR $@3 identifier_list ':' type ';' .

    $default  reduce using rule 7 (declarations)


State 81

   20 arguments: '(' parameter_list . ')'
   24 parameter_list: parameter_list . ';' $@7 identifier_list ':' type

    ')'  shift, and go to state 99
    ';'  shift, and go to state 100


State 82

   22 parameter_list: $@6 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 101


State 83

   17 subprogram_head: FUNCTION ID $@4 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 54
    REAL     shift, and go to state 55

    standard_type  go to state 102


State 84

   19 subprogram_head: PROCEDURE ID $@5 arguments ';' .

    $default  reduce using rule 19 (subprogram_head)


State 85

   54 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression_list    go to state 103
    expression         go to state 67
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 86

   53 factor: ID '[' . expression ']'

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 104
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 87

   58 factor: NOT factor .

    $default  reduce using rule 58 (factor)


State 88

   57 factor: '(' expression . ')'

    ')'  shift, and go to state 105


State 89

   43 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 43 (procedure_statement)


State 90

   45 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    expression         go to state 106
    simple_expression  go to state 68
    term               go to state 69
    factor             go to state 70


State 91

   47 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 107
    term               go to state 69
    factor             go to state 70


State 92

   49 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    term    go to state 108
    factor  go to state 70


State 93

   51 term: term MULOP . factor

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    factor  go to state 109


State 94

   41 array_variable: ID '[' expression ']' .

    $default  reduce using rule 41 (array_variable)


State 95

   34 statement: $@8 IF expression THEN . statement ELSE statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 33 ($@8)

    compound_statement   go to state 28
    statement            go to state 110
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 96

   36 statement: $@9 WHILE expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 33 ($@8)

    compound_statement   go to state 28
    statement            go to state 111
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 97

   38 statement: $@10 FOR variable ASSIGNOP . simple_expression TO simple_expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 112
    term               go to state 69
    factor             go to state 70


State 98

   10 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 113


State 99

   20 arguments: '(' parameter_list ')' .

    $default  reduce using rule 20 (arguments)


State 100

   24 parameter_list: parameter_list ';' . $@7 identifier_list ':' type

    $default  reduce using rule 23 ($@7)

    $@7  go to state 114


State 101

    5 identifier_list: identifier_list . ',' ID
   22 parameter_list: $@6 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 115


State 102

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type . ';'

    ';'  shift, and go to state 116


State 103

   45 expression_list: expression_list . ',' expression
   54 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 117
    ','  shift, and go to state 90


State 104

   53 factor: ID '[' expression . ']'

    ']'  shift, and go to state 118


State 105

   57 factor: '(' expression ')' .

    $default  reduce using rule 57 (factor)


State 106

   45 expression_list: expression_list ',' expression .

    $default  reduce using rule 45 (expression_list)


State 107

   47 expression: simple_expression RELOP simple_expression .
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 92

    $default  reduce using rule 47 (expression)


State 108

   49 simple_expression: simple_expression ADDOP term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 93

    $default  reduce using rule 49 (simple_expression)


State 109

   51 term: term MULOP factor .

    $default  reduce using rule 51 (term)


State 110

   34 statement: $@8 IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 119


State 111

   36 statement: $@9 WHILE expression DO statement .

    $default  reduce using rule 36 (statement)


State 112

   38 statement: $@10 FOR variable ASSIGNOP simple_expression . TO simple_expression DO statement
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 92
    TO     shift, and go to state 120


State 113

   10 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 121


State 114

   24 parameter_list: parameter_list ';' $@7 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 122


State 115

   22 parameter_list: $@6 identifier_list ':' . type

    ARRAY    shift, and go to state 53
    INTEGER  shift, and go to state 54
    REAL     shift, and go to state 55

    type           go to state 123
    standard_type  go to state 57


State 116

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';' .

    $default  reduce using rule 17 (subprogram_head)


State 117

   54 factor: ID '(' expression_list ')' .

    $default  reduce using rule 54 (factor)


State 118

   53 factor: ID '[' expression ']' .

    $default  reduce using rule 53 (factor)


State 119

   34 statement: $@8 IF expression THEN statement ELSE . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 33 ($@8)

    compound_statement   go to state 28
    statement            go to state 124
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 120

   38 statement: $@10 FOR variable ASSIGNOP simple_expression TO . simple_expression DO statement

    INUM  shift, and go to state 61
    RNUM  shift, and go to state 62
    ID    shift, and go to state 63
    NOT   shift, and go to state 64
    '('   shift, and go to state 65

    simple_expression  go to state 125
    term               go to state 69
    factor             go to state 70


State 121

   10 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 126


State 122

    5 identifier_list: identifier_list . ',' ID
   24 parameter_list: parameter_list ';' $@7 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 127


State 123

   22 parameter_list: $@6 identifier_list ':' type .

    $default  reduce using rule 22 (parameter_list)


State 124

   34 statement: $@8 IF expression THEN statement ELSE statement .

    $default  reduce using rule 34 (statement)


State 125

   38 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression . DO statement
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 92
    DO     shift, and go to state 128


State 126

   10 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 129


State 127

   24 parameter_list: parameter_list ';' $@7 identifier_list ':' . type

    ARRAY    shift, and go to state 53
    INTEGER  shift, and go to state 54
    REAL     shift, and go to state 55

    type           go to state 130
    standard_type  go to state 57


State 128

   38 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 35 ($@9)
    FOR       reduce using rule 37 ($@10)
    $default  reduce using rule 33 ($@8)

    compound_statement   go to state 28
    statement            go to state 131
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 129

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 54
    REAL     shift, and go to state 55

    standard_type  go to state 132


State 130

   24 parameter_list: parameter_list ';' $@7 identifier_list ':' type .

    $default  reduce using rule 24 (parameter_list)


State 131

   38 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement .

    $default  reduce using rule 38 (statement)


State 132

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 10 (type)
