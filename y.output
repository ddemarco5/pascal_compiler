Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    4 identifier_list: ID
    5                | identifier_list ',' ID

    6 $@3: %empty

    7 declarations: declarations VAR $@3 identifier_list ':' type ';'
    8             | %empty

    9 type: standard_type
   10     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

   11 standard_type: INTEGER
   12              | REAL

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   14                        | %empty

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   16 $@4: %empty

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';'

   18 $@5: %empty

   19 subprogram_head: PROCEDURE ID $@5 arguments ';'
   20                | PROCEDURE ID ';'

   21 arguments: '(' parameter_list ')'

   22 $@6: %empty

   23 parameter_list: $@6 identifier_list ':' type

   24 $@7: %empty

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' type

   26 compound_statement: BBEGIN optional_statements END

   27 optional_statements: statement_list
   28                    | %empty

   29 statement_list: statement
   30               | statement_list ';' statement

   31 statement: variable ASSIGNOP expression
   32          | procedure_statement
   33          | compound_statement
   34          | IF expression THEN statement ELSE statement
   35          | WHILE expression DO statement
   36          | FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

   37 variable: ID
   38         | array_variable

   39 array_variable: ID '[' expression ']'

   40 procedure_statement: ID
   41                    | ID '(' expression_list ')'

   42 expression_list: expression
   43                | expression_list ',' expression

   44 expression: simple_expression
   45           | simple_expression RELOP simple_expression

   46 simple_expression: term
   47                  | simple_expression ADDOP term

   48 term: factor
   49     | term MULOP factor

   50 factor: ID
   51       | ID '[' expression ']'
   52       | ID '(' expression_list ')'
   53       | INUM
   54       | RNUM
   55       | '(' expression ')'
   56       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 21 41 52 55
')' (41) 3 21 41 52 55
',' (44) 5 43
'.' (46) 3
':' (58) 7 17 23 25
';' (59) 3 7 13 17 19 20 25 30
'[' (91) 10 39 51
']' (93) 10 39 51
error (256)
INUM (258) 10 53
RNUM (259) 54
ID (260) 3 4 5 17 19 20 37 39 40 41 50 51 52
ASSIGNOP (261) 31 36
RELOP (262) 45
ADDOP (263) 47
MULOP (264) 49
NOT (265) 56
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 3
VAR (279) 7
ARRAY (280) 10
OF (281) 10
DOTDOT (282) 10
INTEGER (283) 11
REAL (284) 12
FUNCTION (285) 17
PROCEDURE (286) 19 20
BBEGIN (287) 26
END (288) 26
IF (289) 34
THEN (290) 34
ELSE (291) 34
WHILE (292) 35
DO (293) 35 36
FOR (294) 36
TO (295) 36
FUNCTION_CALL (296)
ARRAY_ACCESS (297)
COMMA (298)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 3, on right: 0
$@1 (54)
    on left: 1, on right: 3
$@2 (55)
    on left: 2, on right: 3
identifier_list (56)
    on left: 4 5, on right: 3 5 7 23 25
declarations (57)
    on left: 7 8, on right: 3 7 15
$@3 (58)
    on left: 6, on right: 7
type (59)
    on left: 9 10, on right: 7 23 25
standard_type (60)
    on left: 11 12, on right: 9 10 17
subprogram_declarations (61)
    on left: 13 14, on right: 3 13 15
subprogram_declaration (62)
    on left: 15, on right: 13
subprogram_head (63)
    on left: 17 19 20, on right: 15
$@4 (64)
    on left: 16, on right: 17
$@5 (65)
    on left: 18, on right: 19
arguments (66)
    on left: 21, on right: 17 19
parameter_list (67)
    on left: 23 25, on right: 21 25
$@6 (68)
    on left: 22, on right: 23
$@7 (69)
    on left: 24, on right: 25
compound_statement (70)
    on left: 26, on right: 3 15 33
optional_statements (71)
    on left: 27 28, on right: 26
statement_list (72)
    on left: 29 30, on right: 27 30
statement (73)
    on left: 31 32 33 34 35 36, on right: 29 30 34 35 36
variable (74)
    on left: 37 38, on right: 31 36
array_variable (75)
    on left: 39, on right: 38
procedure_statement (76)
    on left: 40 41, on right: 32
expression_list (77)
    on left: 42 43, on right: 41 43 52
expression (78)
    on left: 44 45, on right: 31 34 35 39 42 43 51 55
simple_expression (79)
    on left: 46 47, on right: 36 44 45 47
term (80)
    on left: 48 49, on right: 46 47 49
factor (81)
    on left: 50 51 52 53 54 55 56, on right: 48 49 56


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    3 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    3 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    4 identifier_list: ID .

    $default  reduce using rule 4 (identifier_list)


State 8

    3 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' $@2 declarations subprogram_declarations compound_statement '.'
    5 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    3 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' $@2 declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    5 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . $@2 declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 2 ($@2)

    $@2  go to state 13


State 12

    5 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 5 (identifier_list)


State 13

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 8 (declarations)

    declarations  go to state 14


State 14

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations . subprogram_declarations compound_statement '.'
    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 16


State 15

    7 declarations: declarations VAR . $@3 identifier_list ':' type ';'

    $default  reduce using rule 6 ($@3)

    $@3  go to state 17


State 16

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations . compound_statement '.'
   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 23


State 17

    7 declarations: declarations VAR $@3 . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 24


State 18

   17 subprogram_head: FUNCTION . ID $@4 arguments ':' standard_type ';'

    ID  shift, and go to state 25


State 19

   19 subprogram_head: PROCEDURE . ID $@5 arguments ';'
   20                | PROCEDURE . ID ';'

    ID  shift, and go to state 26


State 20

   26 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    $default  reduce using rule 28 (optional_statements)

    compound_statement   go to state 31
    optional_statements  go to state 32
    statement_list       go to state 33
    statement            go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 21

   13 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


State 22

   15 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 8 (declarations)

    declarations  go to state 39


State 23

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


State 24

    5 identifier_list: identifier_list . ',' ID
    7 declarations: declarations VAR $@3 identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 41


State 25

   17 subprogram_head: FUNCTION ID . $@4 arguments ':' standard_type ';'

    $default  reduce using rule 16 ($@4)

    $@4  go to state 42


State 26

   19 subprogram_head: PROCEDURE ID . $@5 arguments ';'
   20                | PROCEDURE ID . ';'

    ';'  shift, and go to state 43

    $default  reduce using rule 18 ($@5)

    $@5  go to state 44


State 27

   37 variable: ID .
   39 array_variable: ID . '[' expression ']'
   40 procedure_statement: ID .
   41                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 37 (variable)
    $default  reduce using rule 40 (procedure_statement)


State 28

   34 statement: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 29

   35 statement: WHILE . expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 30

   36 statement: FOR . variable ASSIGNOP simple_expression TO simple_expression DO statement

    ID  shift, and go to state 57

    variable        go to state 58
    array_variable  go to state 36


State 31

   33 statement: compound_statement .

    $default  reduce using rule 33 (statement)


State 32

   26 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 59


State 33

   27 optional_statements: statement_list .
   30 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 60

    $default  reduce using rule 27 (optional_statements)


State 34

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


State 35

   31 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 61


State 36

   38 variable: array_variable .

    $default  reduce using rule 38 (variable)


State 37

   32 statement: procedure_statement .

    $default  reduce using rule 32 (statement)


State 38

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 13 (subprogram_declarations)


State 39

    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'
   15 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 62


State 40

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 3 (program)


State 41

    7 declarations: declarations VAR $@3 identifier_list ':' . type ';'

    ARRAY    shift, and go to state 63
    INTEGER  shift, and go to state 64
    REAL     shift, and go to state 65

    type           go to state 66
    standard_type  go to state 67


State 42

   17 subprogram_head: FUNCTION ID $@4 . arguments ':' standard_type ';'

    '('  shift, and go to state 68

    arguments  go to state 69


State 43

   20 subprogram_head: PROCEDURE ID ';' .

    $default  reduce using rule 20 (subprogram_head)


State 44

   19 subprogram_head: PROCEDURE ID $@5 . arguments ';'

    '('  shift, and go to state 68

    arguments  go to state 70


State 45

   41 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 71
    expression         go to state 72
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 46

   39 array_variable: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 73
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 47

   53 factor: INUM .

    $default  reduce using rule 53 (factor)


State 48

   54 factor: RNUM .

    $default  reduce using rule 54 (factor)


State 49

   50 factor: ID .
   51       | ID . '[' expression ']'
   52       | ID . '(' expression_list ')'

    '('  shift, and go to state 74
    '['  shift, and go to state 75

    $default  reduce using rule 50 (factor)


State 50

   56 factor: NOT . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 76


State 51

   55 factor: '(' . expression ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 77
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 52

   34 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 78


State 53

   44 expression: simple_expression .
   45           | simple_expression . RELOP simple_expression
   47 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 79
    ADDOP  shift, and go to state 80

    $default  reduce using rule 44 (expression)


State 54

   46 simple_expression: term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 81

    $default  reduce using rule 46 (simple_expression)


State 55

   48 term: factor .

    $default  reduce using rule 48 (term)


State 56

   35 statement: WHILE expression . DO statement

    DO  shift, and go to state 82


State 57

   37 variable: ID .
   39 array_variable: ID . '[' expression ']'

    '['  shift, and go to state 46

    $default  reduce using rule 37 (variable)


State 58

   36 statement: FOR variable . ASSIGNOP simple_expression TO simple_expression DO statement

    ASSIGNOP  shift, and go to state 83


State 59

   26 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 26 (compound_statement)


State 60

   30 statement_list: statement_list ';' . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 84
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 61

   31 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 85
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 62

   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   15 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 86


State 63

   10 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 87


State 64

   11 standard_type: INTEGER .

    $default  reduce using rule 11 (standard_type)


State 65

   12 standard_type: REAL .

    $default  reduce using rule 12 (standard_type)


State 66

    7 declarations: declarations VAR $@3 identifier_list ':' type . ';'

    ';'  shift, and go to state 88


State 67

    9 type: standard_type .

    $default  reduce using rule 9 (type)


State 68

   21 arguments: '(' . parameter_list ')'

    $default  reduce using rule 22 ($@6)

    parameter_list  go to state 89
    $@6             go to state 90


State 69

   17 subprogram_head: FUNCTION ID $@4 arguments . ':' standard_type ';'

    ':'  shift, and go to state 91


State 70

   19 subprogram_head: PROCEDURE ID $@5 arguments . ';'

    ';'  shift, and go to state 92


State 71

   41 procedure_statement: ID '(' expression_list . ')'
   43 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


State 72

   42 expression_list: expression .

    $default  reduce using rule 42 (expression_list)


State 73

   39 array_variable: ID '[' expression . ']'

    ']'  shift, and go to state 95


State 74

   52 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 96
    expression         go to state 72
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 75

   51 factor: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 97
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 76

   56 factor: NOT factor .

    $default  reduce using rule 56 (factor)


State 77

   55 factor: '(' expression . ')'

    ')'  shift, and go to state 98


State 78

   34 statement: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 99
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 79

   45 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 100
    term               go to state 54
    factor             go to state 55


State 80

   47 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 101
    factor  go to state 55


State 81

   49 term: term MULOP . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 102


State 82

   35 statement: WHILE expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 103
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 83

   36 statement: FOR variable ASSIGNOP . simple_expression TO simple_expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 104
    term               go to state 54
    factor             go to state 55


State 84

   30 statement_list: statement_list ';' statement .

    $default  reduce using rule 30 (statement_list)


State 85

   31 statement: variable ASSIGNOP expression .

    $default  reduce using rule 31 (statement)


State 86

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 15 (subprogram_declaration)


State 87

   10 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 105


State 88

    7 declarations: declarations VAR $@3 identifier_list ':' type ';' .

    $default  reduce using rule 7 (declarations)


State 89

   21 arguments: '(' parameter_list . ')'
   25 parameter_list: parameter_list . ';' $@7 identifier_list ':' type

    ')'  shift, and go to state 106
    ';'  shift, and go to state 107


State 90

   23 parameter_list: $@6 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 108


State 91

   17 subprogram_head: FUNCTION ID $@4 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 64
    REAL     shift, and go to state 65

    standard_type  go to state 109


State 92

   19 subprogram_head: PROCEDURE ID $@5 arguments ';' .

    $default  reduce using rule 19 (subprogram_head)


State 93

   41 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 41 (procedure_statement)


State 94

   43 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 110
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 95

   39 array_variable: ID '[' expression ']' .

    $default  reduce using rule 39 (array_variable)


State 96

   43 expression_list: expression_list . ',' expression
   52 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 111
    ','  shift, and go to state 94


State 97

   51 factor: ID '[' expression . ']'

    ']'  shift, and go to state 112


State 98

   55 factor: '(' expression ')' .

    $default  reduce using rule 55 (factor)


State 99

   34 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 113


State 100

   45 expression: simple_expression RELOP simple_expression .
   47 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 80

    $default  reduce using rule 45 (expression)


State 101

   47 simple_expression: simple_expression ADDOP term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 81

    $default  reduce using rule 47 (simple_expression)


State 102

   49 term: term MULOP factor .

    $default  reduce using rule 49 (term)


State 103

   35 statement: WHILE expression DO statement .

    $default  reduce using rule 35 (statement)


State 104

   36 statement: FOR variable ASSIGNOP simple_expression . TO simple_expression DO statement
   47 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 80
    TO     shift, and go to state 114


State 105

   10 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 115


State 106

   21 arguments: '(' parameter_list ')' .

    $default  reduce using rule 21 (arguments)


State 107

   25 parameter_list: parameter_list ';' . $@7 identifier_list ':' type

    $default  reduce using rule 24 ($@7)

    $@7  go to state 116


State 108

    5 identifier_list: identifier_list . ',' ID
   23 parameter_list: $@6 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 117


State 109

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type . ';'

    ';'  shift, and go to state 118


State 110

   43 expression_list: expression_list ',' expression .

    $default  reduce using rule 43 (expression_list)


State 111

   52 factor: ID '(' expression_list ')' .

    $default  reduce using rule 52 (factor)


State 112

   51 factor: ID '[' expression ']' .

    $default  reduce using rule 51 (factor)


State 113

   34 statement: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 119
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 114

   36 statement: FOR variable ASSIGNOP simple_expression TO . simple_expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 120
    term               go to state 54
    factor             go to state 55


State 115

   10 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 121


State 116

   25 parameter_list: parameter_list ';' $@7 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 122


State 117

   23 parameter_list: $@6 identifier_list ':' . type

    ARRAY    shift, and go to state 63
    INTEGER  shift, and go to state 64
    REAL     shift, and go to state 65

    type           go to state 123
    standard_type  go to state 67


State 118

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';' .

    $default  reduce using rule 17 (subprogram_head)


State 119

   34 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 34 (statement)


State 120

   36 statement: FOR variable ASSIGNOP simple_expression TO simple_expression . DO statement
   47 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 80
    DO     shift, and go to state 124


State 121

   10 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 125


State 122

    5 identifier_list: identifier_list . ',' ID
   25 parameter_list: parameter_list ';' $@7 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 126


State 123

   23 parameter_list: $@6 identifier_list ':' type .

    $default  reduce using rule 23 (parameter_list)


State 124

   36 statement: FOR variable ASSIGNOP simple_expression TO simple_expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 127
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 125

   10 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 128


State 126

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' . type

    ARRAY    shift, and go to state 63
    INTEGER  shift, and go to state 64
    REAL     shift, and go to state 65

    type           go to state 129
    standard_type  go to state 67


State 127

   36 statement: FOR variable ASSIGNOP simple_expression TO simple_expression DO statement .

    $default  reduce using rule 36 (statement)


State 128

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 64
    REAL     shift, and go to state 65

    standard_type  go to state 130


State 129

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' type .

    $default  reduce using rule 25 (parameter_list)


State 130

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 10 (type)
