Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 $@2: %empty

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';'

   16 $@3: %empty

   17 subprogram_head: PROCEDURE ID $@3 arguments ';'

   18 arguments: '(' parameter_list ')'

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement
   29          | IF expression THEN statement ELSE statement
   30          | WHILE expression DO statement

   31 variable: ID
   32         | ID '[' expression ']'

   33 procedure_statement: ID
   34                    | ID '(' expression_list ')'

   35 expression_list: expression
   36                | expression_list ',' expression

   37 expression: simple_expression
   38           | simple_expression RELOP simple_expression

   39 simple_expression: term
   40                  | simple_expression ADDOP term

   41 term: factor
   42     | term MULOP factor

   43 factor: ID
   44       | ID '[' expression ']'
   45       | ID '(' expression_list ')'
   46       | INUM
   47       | RNUM
   48       | '(' expression ')'
   49       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 34 45 48
')' (41) 2 18 34 45 48
',' (44) 4 36
'.' (46) 2
':' (58) 5 15 19 20
';' (59) 2 5 11 15 17 20 25
'[' (91) 8 32 44
']' (93) 8 32 44
error (256)
INUM (258) 8 46
RNUM (259) 47
ID (260) 2 3 4 15 17 31 32 33 34 43 44 45
ASSIGNOP (261) 26
RELOP (262) 38
ADDOP (263) 40
MULOP (264) 42
NOT (265) 49
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 2
VAR (279) 5
ARRAY (280) 8
OF (281) 8
DOTDOT (282) 8
INTEGER (283) 9
REAL (284) 10
FUNCTION (285) 15
PROCEDURE (286) 17
BBEGIN (287) 21
END (288) 21
IF (289) 29
THEN (290) 29
ELSE (291) 29
WHILE (292) 30
DO (293) 30
FUNCTION_CALL (294)
ARRAY_ACCESS (295)
COMMA (296)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 2, on right: 0
$@1 (52)
    on left: 1, on right: 2
identifier_list (53)
    on left: 3 4, on right: 2 4 5 19 20
declarations (54)
    on left: 5 6, on right: 2 5 13
type (55)
    on left: 7 8, on right: 5 19 20
standard_type (56)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (57)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (58)
    on left: 13, on right: 11
subprogram_head (59)
    on left: 15 17, on right: 13
$@2 (60)
    on left: 14, on right: 15
$@3 (61)
    on left: 16, on right: 17
arguments (62)
    on left: 18, on right: 15 17
parameter_list (63)
    on left: 19 20, on right: 18 20
compound_statement (64)
    on left: 21, on right: 2 13 28
optional_statements (65)
    on left: 22 23, on right: 21
statement_list (66)
    on left: 24 25, on right: 22 25
statement (67)
    on left: 26 27 28 29 30, on right: 24 25 29 30
variable (68)
    on left: 31 32, on right: 26
procedure_statement (69)
    on left: 33 34, on right: 27
expression_list (70)
    on left: 35 36, on right: 34 36 45
expression (71)
    on left: 37 38, on right: 26 29 30 32 35 36 44 48
simple_expression (72)
    on left: 39 40, on right: 37 38 40
term (73)
    on left: 41 42, on right: 39 40 42
factor (74)
    on left: 43 44 45 46 47 48 49, on right: 41 42 49


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 17

   15 subprogram_head: FUNCTION . ID $@2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


State 18

   17 subprogram_head: PROCEDURE . ID $@3 arguments ';'

    ID  shift, and go to state 25


State 19

   21 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 29
    optional_statements  go to state 30
    statement_list       go to state 31
    statement            go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


State 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 36


State 22

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 24

   15 subprogram_head: FUNCTION ID . $@2 arguments ':' standard_type ';'

    $default  reduce using rule 14 ($@2)

    $@2  go to state 43


State 25

   17 subprogram_head: PROCEDURE ID . $@3 arguments ';'

    $default  reduce using rule 16 ($@3)

    $@3  go to state 44


State 26

   31 variable: ID .
   32         | ID . '[' expression ']'
   33 procedure_statement: ID .
   34                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 31 (variable)
    $default  reduce using rule 33 (procedure_statement)


State 27

   29 statement: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 28

   30 statement: WHILE . expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 29

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 30

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 57


State 31

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 58

    $default  reduce using rule 22 (optional_statements)


State 32

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 33

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 59


State 34

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 36

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 60


State 37

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 38

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 61


State 39

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 40

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 41

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 62


State 42

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 43

   15 subprogram_head: FUNCTION ID $@2 . arguments ':' standard_type ';'

    '('  shift, and go to state 63

    arguments  go to state 64


State 44

   17 subprogram_head: PROCEDURE ID $@3 . arguments ';'

    '('  shift, and go to state 63

    arguments  go to state 65


State 45

   34 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 66
    expression         go to state 67
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 46

   32 variable: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 68
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 47

   46 factor: INUM .

    $default  reduce using rule 46 (factor)


State 48

   47 factor: RNUM .

    $default  reduce using rule 47 (factor)


State 49

   43 factor: ID .
   44       | ID . '[' expression ']'
   45       | ID . '(' expression_list ')'

    '('  shift, and go to state 69
    '['  shift, and go to state 70

    $default  reduce using rule 43 (factor)


State 50

   49 factor: NOT . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 71


State 51

   48 factor: '(' . expression ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 72
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 52

   29 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 73


State 53

   37 expression: simple_expression .
   38           | simple_expression . RELOP simple_expression
   40 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 74
    ADDOP  shift, and go to state 75

    $default  reduce using rule 37 (expression)


State 54

   39 simple_expression: term .
   42 term: term . MULOP factor

    MULOP  shift, and go to state 76

    $default  reduce using rule 39 (simple_expression)


State 55

   41 term: factor .

    $default  reduce using rule 41 (term)


State 56

   30 statement: WHILE expression . DO statement

    DO  shift, and go to state 77


State 57

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 58

   25 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 78
    variable             go to state 33
    procedure_statement  go to state 34


State 59

   26 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 79
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 60

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 80


State 61

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 81


State 62

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 63

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 82
    parameter_list   go to state 83


State 64

   15 subprogram_head: FUNCTION ID $@2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 84


State 65

   17 subprogram_head: PROCEDURE ID $@3 arguments . ';'

    ';'  shift, and go to state 85


State 66

   34 procedure_statement: ID '(' expression_list . ')'
   36 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 67

   35 expression_list: expression .

    $default  reduce using rule 35 (expression_list)


State 68

   32 variable: ID '[' expression . ']'

    ']'  shift, and go to state 88


State 69

   45 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 89
    expression         go to state 67
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 70

   44 factor: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 90
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 71

   49 factor: NOT factor .

    $default  reduce using rule 49 (factor)


State 72

   48 factor: '(' expression . ')'

    ')'  shift, and go to state 91


State 73

   29 statement: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 92
    variable             go to state 33
    procedure_statement  go to state 34


State 74

   38 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 93
    term               go to state 54
    factor             go to state 55


State 75

   40 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 94
    factor  go to state 55


State 76

   42 term: term MULOP . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 95


State 77

   30 statement: WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 96
    variable             go to state 33
    procedure_statement  go to state 34


State 78

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 79

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 80

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 81

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 97


State 82

    4 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 98


State 83

   18 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 99
    ';'  shift, and go to state 100


State 84

   15 subprogram_head: FUNCTION ID $@2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 101


State 85

   17 subprogram_head: PROCEDURE ID $@3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


State 86

   34 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 34 (procedure_statement)


State 87

   36 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 102
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 88

   32 variable: ID '[' expression ']' .

    $default  reduce using rule 32 (variable)


State 89

   36 expression_list: expression_list . ',' expression
   45 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 103
    ','  shift, and go to state 87


State 90

   44 factor: ID '[' expression . ']'

    ']'  shift, and go to state 104


State 91

   48 factor: '(' expression ')' .

    $default  reduce using rule 48 (factor)


State 92

   29 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 105


State 93

   38 expression: simple_expression RELOP simple_expression .
   40 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 75

    $default  reduce using rule 38 (expression)


State 94

   40 simple_expression: simple_expression ADDOP term .
   42 term: term . MULOP factor

    MULOP  shift, and go to state 76

    $default  reduce using rule 40 (simple_expression)


State 95

   42 term: term MULOP factor .

    $default  reduce using rule 42 (term)


State 96

   30 statement: WHILE expression DO statement .

    $default  reduce using rule 30 (statement)


State 97

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 106


State 98

   19 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 107
    standard_type  go to state 42


State 99

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


State 100

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 108


State 101

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 109


State 102

   36 expression_list: expression_list ',' expression .

    $default  reduce using rule 36 (expression_list)


State 103

   45 factor: ID '(' expression_list ')' .

    $default  reduce using rule 45 (factor)


State 104

   44 factor: ID '[' expression ']' .

    $default  reduce using rule 44 (factor)


State 105

   29 statement: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 110
    variable             go to state 33
    procedure_statement  go to state 34


State 106

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 111


State 107

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 108

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 112


State 109

   15 subprogram_head: FUNCTION ID $@2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 110

   29 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 29 (statement)


State 111

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 113


State 112

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 114
    standard_type  go to state 42


State 113

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 115


State 114

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 115

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
