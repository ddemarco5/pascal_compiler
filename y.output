Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    4 identifier_list: ID
    5                | identifier_list ',' ID

    6 $@3: %empty

    7 declarations: declarations VAR $@3 identifier_list ':' type ';'
    8             | %empty

    9 type: standard_type
   10     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

   11 standard_type: INTEGER
   12              | REAL

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   14                        | %empty

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   16 $@4: %empty

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';'

   18 $@5: %empty

   19 subprogram_head: PROCEDURE ID $@5 arguments ';'
   20                | PROCEDURE ID ';'

   21 arguments: '(' parameter_list ')'

   22 $@6: %empty

   23 parameter_list: $@6 identifier_list ':' type

   24 $@7: %empty

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' type

   26 compound_statement: BBEGIN optional_statements END

   27 optional_statements: statement_list
   28                    | %empty

   29 statement_list: statement
   30               | statement_list ';' statement

   31 statement: variable ASSIGNOP expression
   32          | procedure_statement
   33          | compound_statement

   34 $@8: %empty

   35 statement: $@8 IF expression THEN statement ELSE statement

   36 $@9: %empty

   37 statement: $@9 WHILE expression DO statement

   38 $@10: %empty

   39 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

   40 variable: ID
   41         | array_variable

   42 array_variable: ID '[' expression ']'

   43 procedure_statement: ID
   44                    | ID '(' expression_list ')'

   45 expression_list: expression
   46                | expression_list ',' expression

   47 expression: simple_expression
   48           | simple_expression RELOP simple_expression

   49 simple_expression: term
   50                  | simple_expression ADDOP term

   51 term: factor
   52     | term MULOP factor

   53 factor: ID
   54       | ID '[' expression ']'
   55       | ID '(' expression_list ')'
   56       | INUM
   57       | RNUM
   58       | '(' expression ')'
   59       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 21 44 55 58
')' (41) 3 21 44 55 58
',' (44) 5 46
'.' (46) 3
':' (58) 7 17 23 25
';' (59) 3 7 13 17 19 20 25 30
'[' (91) 10 42 54
']' (93) 10 42 54
error (256)
INUM (258) 10 56
RNUM (259) 57
ID (260) 3 4 5 17 19 20 40 42 43 44 53 54 55
ASSIGNOP (261) 31 39
RELOP (262) 48
ADDOP (263) 50
MULOP (264) 52
NOT (265) 59
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 3
VAR (279) 7
ARRAY (280) 10
OF (281) 10
DOTDOT (282) 10
INTEGER (283) 11
REAL (284) 12
FUNCTION (285) 17
PROCEDURE (286) 19 20
BBEGIN (287) 26
END (288) 26
IF (289) 35
THEN (290) 35
ELSE (291) 35
WHILE (292) 37
DO (293) 37 39
FOR (294) 39
TO (295) 39
FUNCTION_CALL (296)
ARRAY_ACCESS (297)
COMMA (298)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 3, on right: 0
$@1 (54)
    on left: 1, on right: 3
$@2 (55)
    on left: 2, on right: 3
identifier_list (56)
    on left: 4 5, on right: 3 5 7 23 25
declarations (57)
    on left: 7 8, on right: 3 7 15
$@3 (58)
    on left: 6, on right: 7
type (59)
    on left: 9 10, on right: 7 23 25
standard_type (60)
    on left: 11 12, on right: 9 10 17
subprogram_declarations (61)
    on left: 13 14, on right: 3 13 15
subprogram_declaration (62)
    on left: 15, on right: 13
subprogram_head (63)
    on left: 17 19 20, on right: 15
$@4 (64)
    on left: 16, on right: 17
$@5 (65)
    on left: 18, on right: 19
arguments (66)
    on left: 21, on right: 17 19
parameter_list (67)
    on left: 23 25, on right: 21 25
$@6 (68)
    on left: 22, on right: 23
$@7 (69)
    on left: 24, on right: 25
compound_statement (70)
    on left: 26, on right: 3 15 33
optional_statements (71)
    on left: 27 28, on right: 26
statement_list (72)
    on left: 29 30, on right: 27 30
statement (73)
    on left: 31 32 33 35 37 39, on right: 29 30 35 37 39
$@8 (74)
    on left: 34, on right: 35
$@9 (75)
    on left: 36, on right: 37
$@10 (76)
    on left: 38, on right: 39
variable (77)
    on left: 40 41, on right: 31 39
array_variable (78)
    on left: 42, on right: 41
procedure_statement (79)
    on left: 43 44, on right: 32
expression_list (80)
    on left: 45 46, on right: 44 46 55
expression (81)
    on left: 47 48, on right: 31 35 37 42 45 46 54 58
simple_expression (82)
    on left: 49 50, on right: 39 47 48 50
term (83)
    on left: 51 52, on right: 49 50 52
factor (84)
    on left: 53 54 55 56 57 58 59, on right: 51 52 59


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    3 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    3 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    4 identifier_list: ID .

    $default  reduce using rule 4 (identifier_list)


State 8

    3 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' $@2 declarations subprogram_declarations compound_statement '.'
    5 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    3 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' $@2 declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    5 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . $@2 declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 2 ($@2)

    $@2  go to state 13


State 12

    5 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 5 (identifier_list)


State 13

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 8 (declarations)

    declarations  go to state 14


State 14

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations . subprogram_declarations compound_statement '.'
    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 16


State 15

    7 declarations: declarations VAR . $@3 identifier_list ':' type ';'

    $default  reduce using rule 6 ($@3)

    $@3  go to state 17


State 16

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations . compound_statement '.'
   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 23


State 17

    7 declarations: declarations VAR $@3 . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 24


State 18

   17 subprogram_head: FUNCTION . ID $@4 arguments ':' standard_type ';'

    ID  shift, and go to state 25


State 19

   19 subprogram_head: PROCEDURE . ID $@5 arguments ';'
   20                | PROCEDURE . ID ';'

    ID  shift, and go to state 26


State 20

   26 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    IF        reduce using rule 34 ($@8)
    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 28 (optional_statements)

    compound_statement   go to state 28
    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 21

   13 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


State 22

   15 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 8 (declarations)

    declarations  go to state 39


State 23

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


State 24

    5 identifier_list: identifier_list . ',' ID
    7 declarations: declarations VAR $@3 identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 41


State 25

   17 subprogram_head: FUNCTION ID . $@4 arguments ':' standard_type ';'

    $default  reduce using rule 16 ($@4)

    $@4  go to state 42


State 26

   19 subprogram_head: PROCEDURE ID . $@5 arguments ';'
   20                | PROCEDURE ID . ';'

    ';'  shift, and go to state 43

    $default  reduce using rule 18 ($@5)

    $@5  go to state 44


State 27

   40 variable: ID .
   42 array_variable: ID . '[' expression ']'
   43 procedure_statement: ID .
   44                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 40 (variable)
    $default  reduce using rule 43 (procedure_statement)


State 28

   33 statement: compound_statement .

    $default  reduce using rule 33 (statement)


State 29

   26 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 47


State 30

   27 optional_statements: statement_list .
   30 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 48

    $default  reduce using rule 27 (optional_statements)


State 31

   29 statement_list: statement .

    $default  reduce using rule 29 (statement_list)


State 32

   35 statement: $@8 . IF expression THEN statement ELSE statement

    IF  shift, and go to state 49


State 33

   37 statement: $@9 . WHILE expression DO statement

    WHILE  shift, and go to state 50


State 34

   39 statement: $@10 . FOR variable ASSIGNOP simple_expression TO simple_expression DO statement

    FOR  shift, and go to state 51


State 35

   31 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 52


State 36

   41 variable: array_variable .

    $default  reduce using rule 41 (variable)


State 37

   32 statement: procedure_statement .

    $default  reduce using rule 32 (statement)


State 38

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 13 (subprogram_declarations)


State 39

    7 declarations: declarations . VAR $@3 identifier_list ':' type ';'
   15 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 15

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 53


State 40

    3 program: $@1 PROGRAM ID '(' identifier_list ')' ';' $@2 declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 3 (program)


State 41

    7 declarations: declarations VAR $@3 identifier_list ':' . type ';'

    ARRAY    shift, and go to state 54
    INTEGER  shift, and go to state 55
    REAL     shift, and go to state 56

    type           go to state 57
    standard_type  go to state 58


State 42

   17 subprogram_head: FUNCTION ID $@4 . arguments ':' standard_type ';'

    '('  shift, and go to state 59

    arguments  go to state 60


State 43

   20 subprogram_head: PROCEDURE ID ';' .

    $default  reduce using rule 20 (subprogram_head)


State 44

   19 subprogram_head: PROCEDURE ID $@5 . arguments ';'

    '('  shift, and go to state 59

    arguments  go to state 61


State 45

   44 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression_list    go to state 67
    expression         go to state 68
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 46

   42 array_variable: ID '[' . expression ']'

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 72
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 47

   26 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 26 (compound_statement)


State 48

   30 statement_list: statement_list ';' . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 34 ($@8)

    compound_statement   go to state 28
    statement            go to state 73
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 49

   35 statement: $@8 IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 74
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 50

   37 statement: $@9 WHILE . expression DO statement

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 75
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 51

   39 statement: $@10 FOR . variable ASSIGNOP simple_expression TO simple_expression DO statement

    ID  shift, and go to state 76

    variable        go to state 77
    array_variable  go to state 36


State 52

   31 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 78
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 53

   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   15 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19
    BBEGIN     shift, and go to state 20

    subprogram_declaration  go to state 21
    subprogram_head         go to state 22
    compound_statement      go to state 79


State 54

   10 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 80


State 55

   11 standard_type: INTEGER .

    $default  reduce using rule 11 (standard_type)


State 56

   12 standard_type: REAL .

    $default  reduce using rule 12 (standard_type)


State 57

    7 declarations: declarations VAR $@3 identifier_list ':' type . ';'

    ';'  shift, and go to state 81


State 58

    9 type: standard_type .

    $default  reduce using rule 9 (type)


State 59

   21 arguments: '(' . parameter_list ')'

    $default  reduce using rule 22 ($@6)

    parameter_list  go to state 82
    $@6             go to state 83


State 60

   17 subprogram_head: FUNCTION ID $@4 arguments . ':' standard_type ';'

    ':'  shift, and go to state 84


State 61

   19 subprogram_head: PROCEDURE ID $@5 arguments . ';'

    ';'  shift, and go to state 85


State 62

   56 factor: INUM .

    $default  reduce using rule 56 (factor)


State 63

   57 factor: RNUM .

    $default  reduce using rule 57 (factor)


State 64

   53 factor: ID .
   54       | ID . '[' expression ']'
   55       | ID . '(' expression_list ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 87

    $default  reduce using rule 53 (factor)


State 65

   59 factor: NOT . factor

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    factor  go to state 88


State 66

   58 factor: '(' . expression ')'

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 89
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 67

   44 procedure_statement: ID '(' expression_list . ')'
   46 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 90
    ','  shift, and go to state 91


State 68

   45 expression_list: expression .

    $default  reduce using rule 45 (expression_list)


State 69

   47 expression: simple_expression .
   48           | simple_expression . RELOP simple_expression
   50 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 92
    ADDOP  shift, and go to state 93

    $default  reduce using rule 47 (expression)


State 70

   49 simple_expression: term .
   52 term: term . MULOP factor

    MULOP  shift, and go to state 94

    $default  reduce using rule 49 (simple_expression)


State 71

   51 term: factor .

    $default  reduce using rule 51 (term)


State 72

   42 array_variable: ID '[' expression . ']'

    ']'  shift, and go to state 95


State 73

   30 statement_list: statement_list ';' statement .

    $default  reduce using rule 30 (statement_list)


State 74

   35 statement: $@8 IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 96


State 75

   37 statement: $@9 WHILE expression . DO statement

    DO  shift, and go to state 97


State 76

   40 variable: ID .
   42 array_variable: ID . '[' expression ']'

    '['  shift, and go to state 46

    $default  reduce using rule 40 (variable)


State 77

   39 statement: $@10 FOR variable . ASSIGNOP simple_expression TO simple_expression DO statement

    ASSIGNOP  shift, and go to state 98


State 78

   31 statement: variable ASSIGNOP expression .

    $default  reduce using rule 31 (statement)


State 79

   15 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 15 (subprogram_declaration)


State 80

   10 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 99


State 81

    7 declarations: declarations VAR $@3 identifier_list ':' type ';' .

    $default  reduce using rule 7 (declarations)


State 82

   21 arguments: '(' parameter_list . ')'
   25 parameter_list: parameter_list . ';' $@7 identifier_list ':' type

    ')'  shift, and go to state 100
    ';'  shift, and go to state 101


State 83

   23 parameter_list: $@6 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 102


State 84

   17 subprogram_head: FUNCTION ID $@4 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 55
    REAL     shift, and go to state 56

    standard_type  go to state 103


State 85

   19 subprogram_head: PROCEDURE ID $@5 arguments ';' .

    $default  reduce using rule 19 (subprogram_head)


State 86

   55 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression_list    go to state 104
    expression         go to state 68
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 87

   54 factor: ID '[' . expression ']'

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 105
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 88

   59 factor: NOT factor .

    $default  reduce using rule 59 (factor)


State 89

   58 factor: '(' expression . ')'

    ')'  shift, and go to state 106


State 90

   44 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 44 (procedure_statement)


State 91

   46 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    expression         go to state 107
    simple_expression  go to state 69
    term               go to state 70
    factor             go to state 71


State 92

   48 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    simple_expression  go to state 108
    term               go to state 70
    factor             go to state 71


State 93

   50 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    term    go to state 109
    factor  go to state 71


State 94

   52 term: term MULOP . factor

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    factor  go to state 110


State 95

   42 array_variable: ID '[' expression ']' .

    $default  reduce using rule 42 (array_variable)


State 96

   35 statement: $@8 IF expression THEN . statement ELSE statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 34 ($@8)

    compound_statement   go to state 28
    statement            go to state 111
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 97

   37 statement: $@9 WHILE expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 34 ($@8)

    compound_statement   go to state 28
    statement            go to state 112
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 98

   39 statement: $@10 FOR variable ASSIGNOP . simple_expression TO simple_expression DO statement

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    simple_expression  go to state 113
    term               go to state 70
    factor             go to state 71


State 99

   10 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 114


State 100

   21 arguments: '(' parameter_list ')' .

    $default  reduce using rule 21 (arguments)


State 101

   25 parameter_list: parameter_list ';' . $@7 identifier_list ':' type

    $default  reduce using rule 24 ($@7)

    $@7  go to state 115


State 102

    5 identifier_list: identifier_list . ',' ID
   23 parameter_list: $@6 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 116


State 103

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type . ';'

    ';'  shift, and go to state 117


State 104

   46 expression_list: expression_list . ',' expression
   55 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 118
    ','  shift, and go to state 91


State 105

   54 factor: ID '[' expression . ']'

    ']'  shift, and go to state 119


State 106

   58 factor: '(' expression ')' .

    $default  reduce using rule 58 (factor)


State 107

   46 expression_list: expression_list ',' expression .

    $default  reduce using rule 46 (expression_list)


State 108

   48 expression: simple_expression RELOP simple_expression .
   50 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 93

    $default  reduce using rule 48 (expression)


State 109

   50 simple_expression: simple_expression ADDOP term .
   52 term: term . MULOP factor

    MULOP  shift, and go to state 94

    $default  reduce using rule 50 (simple_expression)


State 110

   52 term: term MULOP factor .

    $default  reduce using rule 52 (term)


State 111

   35 statement: $@8 IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 120


State 112

   37 statement: $@9 WHILE expression DO statement .

    $default  reduce using rule 37 (statement)


State 113

   39 statement: $@10 FOR variable ASSIGNOP simple_expression . TO simple_expression DO statement
   50 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 93
    TO     shift, and go to state 121


State 114

   10 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 122


State 115

   25 parameter_list: parameter_list ';' $@7 . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 123


State 116

   23 parameter_list: $@6 identifier_list ':' . type

    ARRAY    shift, and go to state 54
    INTEGER  shift, and go to state 55
    REAL     shift, and go to state 56

    type           go to state 124
    standard_type  go to state 58


State 117

   17 subprogram_head: FUNCTION ID $@4 arguments ':' standard_type ';' .

    $default  reduce using rule 17 (subprogram_head)


State 118

   55 factor: ID '(' expression_list ')' .

    $default  reduce using rule 55 (factor)


State 119

   54 factor: ID '[' expression ']' .

    $default  reduce using rule 54 (factor)


State 120

   35 statement: $@8 IF expression THEN statement ELSE . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 34 ($@8)

    compound_statement   go to state 28
    statement            go to state 125
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 121

   39 statement: $@10 FOR variable ASSIGNOP simple_expression TO . simple_expression DO statement

    INUM  shift, and go to state 62
    RNUM  shift, and go to state 63
    ID    shift, and go to state 64
    NOT   shift, and go to state 65
    '('   shift, and go to state 66

    simple_expression  go to state 126
    term               go to state 70
    factor             go to state 71


State 122

   10 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 127


State 123

    5 identifier_list: identifier_list . ',' ID
   25 parameter_list: parameter_list ';' $@7 identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 128


State 124

   23 parameter_list: $@6 identifier_list ':' type .

    $default  reduce using rule 23 (parameter_list)


State 125

   35 statement: $@8 IF expression THEN statement ELSE statement .

    $default  reduce using rule 35 (statement)


State 126

   39 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression . DO statement
   50 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 93
    DO     shift, and go to state 129


State 127

   10 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 130


State 128

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' . type

    ARRAY    shift, and go to state 54
    INTEGER  shift, and go to state 55
    REAL     shift, and go to state 56

    type           go to state 131
    standard_type  go to state 58


State 129

   39 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 20

    WHILE     reduce using rule 36 ($@9)
    FOR       reduce using rule 38 ($@10)
    $default  reduce using rule 34 ($@8)

    compound_statement   go to state 28
    statement            go to state 132
    $@8                  go to state 32
    $@9                  go to state 33
    $@10                 go to state 34
    variable             go to state 35
    array_variable       go to state 36
    procedure_statement  go to state 37


State 130

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 55
    REAL     shift, and go to state 56

    standard_type  go to state 133


State 131

   25 parameter_list: parameter_list ';' $@7 identifier_list ':' type .

    $default  reduce using rule 25 (parameter_list)


State 132

   39 statement: $@10 FOR variable ASSIGNOP simple_expression TO simple_expression DO statement .

    $default  reduce using rule 39 (statement)


State 133

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 10 (type)
